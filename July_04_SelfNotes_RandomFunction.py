# -*- coding: utf-8 -*-
"""
Created on Sat Jul  4 14:45:25 2020

@author: shubhs
"""


# Python Random Module to Generate random Data

# How to generate random numbers and data in Python using a random module.

# How to Use a random module
# Printing random number using random.random()

import random
print(random.random())

# Random Module Functions

# random.randint(a, b)
# It is used to generate a random integer number within a range

print("Random integer is", random.randint(0, 20))

# random.randrange(start,  stop [,  step])

# This function returns a randomly selected integer from range(start, stop, step). 
# Use this function to generate a random integer number within a range.

print("Random integer is", random.randrange(2, 20, 4))

# random.choice(seq)

# It is used to randomly select an item from a List or any sequence.

city_list = ['New Delhi', 'Mumbai', 'Bangalore', 'Pune', 'Vadodara']
print("Random element from list:", random.choice(city_list))

# random.sample(population, k)

# It is used when we want to pick multiple elements from a list or 
# any sequence randomly.

city_list = ['New Delhi', 'Mumbai', 'Bangalore', 'Pune', 'Vadodara']
print("Pick 2 Random element from list:", random.sample(city_list, 2))

# random.choices()

# It is used when we want to choose more than one element from the sequence randomly 
# It is a random sample with replacement.

#sampling with replacement
list = [20, 30, 40, 50 ,60, 70, 80, 90]
sampling = random.choices(list, k=5)
print("sampling with choices method ", sampling)

# random.seed(a=None, version=2)

# The seed function is used to initialize the pseudorandom number generator in Python.
# The random module uses the seed value as a base to generate a random number. 
# If seed value is not present, it takes a system current time. 
# If we use the same seed value before calling any random module function, 
# we will get the same output every time.

# Random number with seed 6
random.seed(6)
print(random.randint(10, 20))

random.seed(6)
print(random.randint(10, 20))


# random.shuffle(x[, random])

# It is used to shuffle or randomize a list or other sequence types. 
# The shuffle function shuffles a list in-place. 
# The most common example is shuffling cards.

list = [2,5,8,9,12]
random.shuffle(list)
print ("Printing shuffled list ", list)

# random.uniform(start, end)

# It is used to generate a floating-point number within a range.

print(random.uniform(10.5, 25.5))

# random.triangular(low, high, mode)

# The random.triangular() function returns a random floating-point number N such 
# that lower <= N <= upper and with the specified mode between those bounds.
# The default value of a lower bound is ZERO, and upper bounds are one. 
# Moreover, the peak argument defaults to the midpoint between the bounds, 
# giving a symmetric distribution.

# Use the random.triangular() function to generate random numbers for triangular 
# distribution to use these number in a simulation. i.e., to generate value from 
# a triangular probability distribution.

print(random.triangular(10.5, 25.5, 5.5))

#######=========================================================

# Generate random String

# How to generate a random string of a fixed length in python

# Cryptographically secure random generator in Python
# Random Numbers and data generated by the random module are not cryptographically secure. 
# cryptographically secure pseudo-random number generator is a random number generator 
# which has the properties that make it suitable for use in cryptography application 
# where data security is essential.

# All cryptographically secure random generator function returns random bytes.
# Random bytes returned by this function depend on the random sources of the OS. 
# Quality of randomness depends on randoms sources of the OS.
# We can use the following approaches to secure the random generator in 
# Python cryptographically:- 

# 1. The secrets module to secure random data
# 2. Use the os.urandom()
# 3. use random.SystemRandom class

import random
import secrets

number = random.SystemRandom().random()
print("secure number is ", number)
print("Secure byte token", secrets.token_bytes(16))

#######=========================================================

# Get and Set the state of random Generator

# The random module has two function getstate and setstate which helps us to 
# capture the current internal state of the random generator. 
# Using this state, we can generate the same random numbers or sequence of data.

# random.getstate()

# The getstate() function returns an object by captures the current internal state
# of the random generator. We can pass this state to the setstate method to restore 
# this state as a current state.

# random.setstate(state)

# The setstate() function restores the internal state of the generator to the 
# state object. i.e. it applies the same state again. 
# This state object can be obtained by calling the getstate function.

# If you get a previous state and restore it, then you can reproduce the same random
# data again and again.  Remember you cannot use a different random function, 
# nor you can change parameters value. By doing this, you are altering the state

number_list = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]

print("First Sample is ", random.sample(number_list,k=5))

state = random.getstate()  # store this current state in state object
print("Second Sample is ", random.sample(number_list,k=5))

random.setstate(state)     # restore state now using setstate
print("Third Sample is ", random.sample(number_list,k=5)) 
# Now it will print the same second sample list

random.setstate(state)     # restore state now
print("Fourth Sample is ", random.sample(number_list,k=5)) 
#again it will print the same second sample list again

#######=========================================================

# Numpy.random

# Generate a random n-dimensional array of float numbers

# numpy.random.rand() 

# It is used to generate an n-dimensional array of random float numbers in 
# the range of [0.0, 1.0)

import numpy as np

random_float_array = np.random.rand(3, 2)
print("3 X 2 random float array in [0.0, 1.0] \n", random_float_array,"\n")

# numpy.random.uniform()

# It is used to generate an n-dimensional array of random float numbers in 
# the range of [low, high)

random_float_array = np.random.uniform(25.5, 99.5, size=(3, 2))
print("3 X 2 random float array in range [25.5, 99.5] \n", random_float_array,"\n")

# Generate a random n-dimensional array of Integers numbers

# numpy.random.randint()

# It is used to generate a random n-dimensional array of integers

random_integer_array = np.random.randint(1, 30, 5)
print("1-dimensional random integer array \n", random_integer_array,"\n")

random_integer_array = np.random.randint(1, 50, size=(3, 2))
print("2-dimensional random integer array \n", random_integer_array)


# Choose the random element from the array of numbers or sequence

# Use the numpy.random.choice() to generate the random samples.
# Use this method to get single or multiple random numbers from the n-dimensional
# array with or without replacement.

array =[10, 20, 30, 40, 50, 20, 40]

single_random_choice = np.random.choice(array, size=1)
print("single random choice from 1-D array", single_random_choice)

multiple_random_choice = np.random.choice(array, size=3, replace=False)
print("multiple random choice from 1-D array without replacement ", 
      multiple_random_choice)

multiple_random_choice = np.random.choice(array, size=4, replace=True)
print("multiple random choice from 1-D array with replacement ", 
      multiple_random_choice)

#######=========================================================

# Generate random Universally unique IDs

# Python UUID Module provides immutable UUID objects.  
# UUID is a Universally Unique IDentifier.

# It has the functions to generate all versions of UUID. 
# Using uuid.uuid4() function, you can generate a 128 bit long random 
# unique ID ad itâ€™s cryptographically safe.

# These unique Ids are used to identify the documents, Users, 
# resources or any information in computer systems.

import uuid

# get a random UUID
safeId = uuid.uuid4()
print("safe unique id is ", safeId)

#######===============================================================

# Example Random

import pandas as pd

np.random.seed(10)

# Sample data randomly at fixed probabilities
voter_race = np.random.choice(a= ["asian","black","hispanic","other","white"],
                              p = [0.05, 0.15 ,0.25, 0.05, 0.5],
                              size=1000)

voter_party = np.random.choice(a= ["democrat","independent","republican"],
                              p = [0.4, 0.2, 0.4],
                              size=1000)

voters = pd.DataFrame({"race":voter_race, 
                       "party":voter_party})

voter_tab = pd.crosstab(voters.race, voters.party, margins = True)

voter_tab.columns = ["democrat","independent","republican","row_totals"]

voter_tab.index = ["asian","black","hispanic","other","white","col_totals"]

observed = voter_tab.iloc[0:5,0:3] 

voter_tab
